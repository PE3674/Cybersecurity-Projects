from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives.asymmetric import rsa, padding
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import serialization
import os
import base64

# AES Encryption
def generate_aes_key():
    return os.urandom(32)  # 256-bit AES key

def encrypt_aes(data, key):
    iv = os.urandom(16)  # Random initialization vector for each encryption
    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())
    encryptor = cipher.encryptor()
    padded_data = data + b"\0" * (16 - len(data) % 16)  # Padding to be multiple of 16 bytes
    encrypted_data = encryptor.update(padded_data) + encryptor.finalize()
    return iv + encrypted_data  # Prepend IV for later decryption

def decrypt_aes(encrypted_data, key):
    iv = encrypted_data[:16]
    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())
    decryptor = cipher.decryptor()
    decrypted_data = decryptor.update(encrypted_data[16:]) + decryptor.finalize()
    return decrypted_data.rstrip(b"\0")  # Remove padding

# RSA Encryption
def generate_rsa_keys():
    private_key = rsa.generate_private_key(
        public_exponent=65537,
        key_size=2048,
        backend=default_backend()
    )
    public_key = private_key.public_key()
    return private_key, public_key

def encrypt_rsa(data, public_key):
    return public_key.encrypt(
        data,
        padding.OAEP(
            mgf=padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None
        )
    )

def decrypt_rsa(encrypted_data, private_key):
    return private_key.decrypt(
        encrypted_data,
        padding.OAEP(
            mgf=padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None
        )
    )

# Save and load RSA keys
def save_rsa_key_to_file(private_key, filename):
    pem = private_key.private_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PrivateFormat.TraditionalOpenSSL,
        encryption_algorithm=serialization.NoEncryption()
    )
    with open(filename, 'wb') as f:
        f.write(pem)

def load_rsa_key_from_file(filename):
    with open(filename, 'rb') as f:
        private_pem = f.read()
    return serialization.load_pem_private_key(private_pem, password=None, backend=default_backend())
import hashlib
import hmac

# HMAC for Integrity
def generate_hmac(key, data):
    return hmac.new(key, data, hashlib.sha256).digest()

def verify_hmac(key, data, expected_hmac):
    return hmac.compare_digest(generate_hmac(key, data), expected_hmac)
import json

# ACL: Access Control List (encrypted)
class ACL:
    def __init__(self):
        self.permissions = {}  # e.g., {'user1': 'read', 'user2': 'write'}

    def set_permission(self, user, permission):
        self.permissions[user] = permission

    def get_permission(self, user):
        return self.permissions.get(user, None)

    def to_json(self):
        return json.dumps(self.permissions)

    def from_json(self, acl_json):
        self.permissions = json.loads(acl_json)
class SecureFileSystem:
    def __init__(self):
        self.files = {}  # Simulated file system, in-memory dictionary of files
        self.user_key = {}  # Stores user keys
        self.acl_map = {}  # Mapping of file -> ACL

    def create_file(self, filename, content, user):
        # Encrypt file content
        aes_key = generate_aes_key()
        encrypted_content = encrypt_aes(content.encode(), aes_key)
        
        # Encrypt AES key for the user using RSA
        if user not in self.user_key:
            raise Exception("User not found!")
        user_public_key = self.user_key[user]
        encrypted_aes_key = encrypt_rsa(aes_key, user_public_key)

        # Encrypt file name
        encrypted_filename = encrypt_rsa(filename.encode(), user_public_key)

        # Store file with encrypted data
        self.files[encrypted_filename] = {
            'content': encrypted_content,
            'aes_key': encrypted_aes_key
        }

        # Initialize ACL
        self.acl_map[encrypted_filename] = ACL()

    def read_file(self, filename, user):
        # Decrypt file name
        if user not in self.user_key:
            raise Exception("User not found!")
        user_private_key = self.user_key[user]
        encrypted_filename = encrypt_rsa(filename.encode(), user_private_key)
        
        if encrypted_filename not in self.files:
            raise Exception("File not found!")

        # Check ACL
        acl = self.acl_map[encrypted_filename]
        if acl.get_permission(user) != 'read':
            raise Exception("Permission denied.")

        # Retrieve and decrypt the AES key
        file_data = self.files[encrypted_filename]
        encrypted_aes_key = file_data['aes_key']
        aes_key = decrypt_rsa(encrypted_aes_key, user_private_key)

        # Decrypt file content
        encrypted_content = file_data['content']
        content = decrypt_aes(encrypted_content, aes_key)
        return content.decode()

    def write_file(self, filename, content, user):
        # Decrypt file name
        if user not in self.user_key:
            raise Exception("User not found!")
        user_private_key = self.user_key[user]
        encrypted_filename = encrypt_rsa(filename.encode(), user_private_key)
        
        if encrypted_filename not in self.files:
            raise Exception("File not found!")

        # Check ACL
        acl = self.acl_map[encrypted_filename]
        if acl.get_permission(user) != 'write':
            raise Exception("Permission denied.")

        # Encrypt the new content
        aes_key = generate_aes_key()
        encrypted_content = encrypt_aes(content.encode(), aes_key)
        
        # Encrypt AES key for the user
        encrypted_aes_key = encrypt_rsa(aes_key, user_private_key)

        # Update file content
        self.files[encrypted_filename] = {
            'content': encrypted_content,
            'aes_key': encrypted_aes_key
        }

    def set_acl(self, filename, user, permission):
        # Encrypt file name for access control
        encrypted_filename = encrypt_rsa(filename.encode(), user)
        acl = self.acl_map.get(encrypted_filename, ACL())
        acl.set_permission(user, permission)
        self.acl_map[encrypted_filename] = acl
def main():
    # Generate RSA keys for users
    user1_private_key, user1_public_key = generate_rsa_keys()
    user2_private_key, user2_public_key = generate_rsa_keys()

    # Store user public keys for encryption (simulated key management)
    sfs = SecureFileSystem()
    sfs.user_key['user1'] = user1_public_key
    sfs.user_key['user2'] = user2_public_key

    # User1 creates a file
    sfs.create_file('example.txt', "This is a secure file.", 'user1')

    # Set ACLs for the file
